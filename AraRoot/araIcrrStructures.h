/*! \file araIcrrStructures.h
  \brief Contains the definitions of all the structures used to store 
  and move ARA data and stuff.
    
  Some simple definitions of the structures that we'll use to store 
  ARA data.

  June 2010  ped@m2-consult.com

  Copyright: M2 Consulting, 2010
*/

#ifndef ARA_STRUCTURES_H
#define ARA_STRUCTURES_H
#include "araIcrrDefines.h"

#define ARA_STRUCTURES_VERSION 1

//Enumerations

///////////////////////////////////////////////////////////////////////////
//Structures
///////////////////////////////////////////////////////////////////////////

//!  The Generic Header
/*!
  This is the 16 byte header that prefaces all ANITA data. The PacketCode_t 
  tells one what kind of packet it is, and the checksum can be used to
  validate the data.
*/
typedef struct {
    unsigned short numBytes;
    unsigned char verId;
  //    unsigned int checksum;
} GenericHeader_t;

//!  The trigger monitor I/O struct
/*!
  Contains all sorts of useful info
  about trigger patterns, deadTime, trigger time and trigger type.
*/
typedef struct {
  //!  The trigger type
  /*!
       bit 0 - 0x01 - Self trigger (i.e., RF trig)
       bit 1 - 0x02 - SMB trigger (PPS trigger from Ru clock) [disabled as firmware does not support it]
       bit 2 - 0x04 - Soft trigger (i.e., strobe from the DAQ)
       bit 6 - 0x40 - DAQ soft trigger (i.e., synchronous trigger generated by DAQ)
       bit 7 - 0x80 - DAQ random trigger (i.e., poisson distributed trigger generated by DAQ)
  */
  unsigned char trigType;     ///<Trig type bit masks
  unsigned short ppsNum;      ///< 1PPS
  unsigned short deadTime1;   ///< LSW of 10MHz counter for deadtime measurement
  unsigned short deadTime2;   ///< MSW of 10MHz counter for deadtime measurement
  unsigned short trigPattern; // trigger pattern: bits 0-8 - facet triggers | bit 9 - deep L1 | bit 10 - shallow L1 | bit 11 - unused | bit 12 - global trigger
  unsigned short rovdd[3];    // [0] - LSW of Rb clock counter | [1] - MSW of Rb clock counter | [2] - DAC voltage for LAB C
  unsigned short rcoCount[3]; // RCO counter for LAB chips
} IcrrTriggerMonitorStruct_t;

//!  The channel header
/*!
  Contains useful info like which channel it is, which LABRADOR chip and when
  the HITBUS (the write pointer wraparound) is.
*/
typedef struct {
  //!  Channel Id
  /*!
    chan + 9*LAB3 (0-8 is LAB3_A, ... 18-26 are LAB3_C)
  */
    unsigned char chanId;   // chan+9*LAB3
  //!  chip id bitmask
  /*!
    0:1  LABRADOR chip
    2 RCO
    3 HITBUS wrap
    4-7 HITBUS offset
  */
    unsigned char chipIdFlag; // Bits 0,1 chipNum; Bit 3 hitBus wrap; 4-7 hitBusOff
  //!  First sample of the hitbus 
  /*!
    The last sample in the waveform is [firstHitbus-1] --unless wrapped.
    Otherwise it runs from firstHitbus+1 to lastHitbus-1 inclusive
  */
    unsigned char firstHitbus; // If wrappedHitbus=0 data runs, lastHitbus+1
  //!  Last sample of the hitbus
  /*!
    The first sample in the waveform is [lastHitbus+1] -- unless wrapped.
    Otherwise it runs from firstHitbus+1 to lastHitbus-1 inclusive
  */
    unsigned char lastHitbus; //to firstHitbus-1 inclusive

} AraRawIcrrRFChannelHeader_t;

//!  A complete RF channel
/*!
  A complete RF channel  (header + waveform)
*/
typedef struct {
    AraRawIcrrRFChannelHeader_t header;
    unsigned short data[MAX_NUMBER_SAMPLES_LAB3];
} IcrrIcrrRFChannelFull_t;

//!  A complete pedestal subtracted RF channel
/*!
  A complete pedestal subtracted RF channel. UNUSED at the moment
*/
typedef struct {
    AraRawIcrrRFChannelHeader_t header;
    short xMax;
    short xMin;
    float mean; ///<Filled by pedestalLib
    float rms; ///<Filled by pedestalLib
    short data[MAX_NUMBER_SAMPLES_LAB3]; ///<Pedestal subtracted and 11bit data
} IcrrIcrrRFChannelPedSubbed_t;

//!  The temperatures
/*!
  The onboard temperatue readout
*/
typedef struct {
  unsigned short temp[8]; ///< 
} IcrrIcrrTemperatureDataStruct_t;

//!  The RF power
/*!
  The RF power readout
*/
typedef struct {
  unsigned short discone[8]; ///< 
  unsigned short batwing[8]; ///< 
} IcrrIcrrRFPowerDataStruct_t;

//!  The DAC settings
/*!
  The DAC setting
*/
typedef struct {
  unsigned short dac[6][4]; ///< 
} IcrrIcrrDACDataStruct_t;

//!  Scaler data
/*!
  Raw scaler data
*/
typedef struct {    
  unsigned short discone[8];
  unsigned short batPlus[8];
  unsigned short batMinus[8];
  unsigned short trigL1[12];
  unsigned short global;
} IcrrIcrrSimpleScalerStruct_t;




//!  On board pedestal struct
/*!
  On board pedestal struct
*/
typedef struct {
    unsigned char chanId;   ///< chan+9*nChip
    unsigned short chipEntries;
    float pedMean[MAX_NUMBER_SAMPLES_LAB3];
    float pedRMS[MAX_NUMBER_SAMPLES_LAB3]; 
} LabChipChannelPedStruct_t;



//!  ARA Event Header 
/*!
  ARA Event Header, contains all kinds of fun information about the event
  including times, trigger patterns, event numbers and error words
*/
typedef struct {
  unsigned int unixTime;       ///< unix UTC sec
  unsigned int unixTimeUs;     ///< unix UTC microsec 

  //!  GPS timestamp
  /*!
     the GPS fraction of second (in ns) 
     (for the X events per second that get 
     tagged with it, note it now includes
     second offset from unixTime)
  */
  int gpsSubTime;    
  unsigned int eventNumber;    ///< Global event number 
  unsigned short calibStatus;   ///< Were we flashing the pulser? 
  unsigned char priority; ///< priority and other
  //!  Error Flag
  /*!
    Bit 1 means sync slip between TURF and software
    Bit 2 is sync slip between SURF 1 and software
    Bit 3 is sync slip between SURF 10 and SURF 1
    Bit 4 is non matching TURF test pattern
    Bit 5 is startBitGood (1 is good, 0 is bad);
    Bit 6 is stopBitGood (1 is good, 0 is bad);
    Bit 7-8 TURFIO photo shutter output
  */
  unsigned char errorFlag; 
  //unsigned char surfSlipFlag; ///< Sync Slip between SURF 2-9 and SURF 1
  
} IcrrEventHeader_t;




//! Hk Data Struct
/*!
  The main housekeeping data structure
*/
typedef struct {    
  IcrrIcrrTemperatureDataStruct_t temp;
  IcrrIcrrRFPowerDataStruct_t rfPow;
  IcrrIcrrDACDataStruct_t dac;
  IcrrIcrrSimpleScalerStruct_t scaler;
} IcrrHkDataStruct_t;

typedef struct {
  unsigned int unixTime;
  unsigned int unixTimeUs;
  unsigned int eventNumber;
  unsigned int errorFlag;
} IcrrHkDataHeader_t;

//! Pedestal Block
/*!
  Pedestal Block
*/
typedef struct {
    GenericHeader_t gHdr;
    unsigned int unixTimeStart;
    unsigned int unixTimeEnd;
    LabChipChannelPedStruct_t chan[NUM_DIGITIZED_ICRR_CHANNELS];
} FullLabChipPedStruct_t;


/////////////////////////////////////////////////////////////////////////////
// On-board structs
////////////////////////////////////////////////////////////////////////////

//! Raw event format 
/*!
  Raw event format
*/
typedef struct {
  GenericHeader_t gHdr;
  IcrrEventHeader_t hd;
  //  unsigned int eventNumber;    /* Global event number */
  IcrrIcrrRFChannelFull_t channel[NUM_DIGITIZED_ICRR_CHANNELS];
  IcrrTriggerMonitorStruct_t trig;
  IcrrHkDataStruct_t hk;
} IcrrEventBody_t;

//! Raw housekeeping event format 
/*!
  Raw housekeeping event format
*/

typedef struct {
  GenericHeader_t gHdr;
  IcrrHkDataHeader_t hd;
  IcrrTriggerMonitorStruct_t trig;
  IcrrHkDataStruct_t hk;
} IcrrHkBody_t;


//! Pedestal subtracted event format  
/*!
  Pedestal subtracted event format
*/
typedef struct {
  GenericHeader_t gHdr;
  unsigned int eventNumber;    /* Global event number */
  unsigned int whichPeds; ///<whichPedestals did we subtract
  IcrrIcrrRFChannelPedSubbed_t channel[NUM_DIGITIZED_ICRR_CHANNELS];
  IcrrHkDataStruct_t hk;
} IcrrIcrrPedSubbedEventBody_t;


//This stuff is just for legacy will be deprecated
typedef struct IcrrRFChannelFull_t  RFChannelFull_t;
typedef struct IcrrRFChannelPedSubbed_t RFChannelPedSubbed_t;
typedef struct IcrrTemperatureDataStruct_t TemperatureDataStruct_t;
typedef struct IcrrRFPowerDataStruct_t RFPowerDataStruct_t;
typedef struct IcrrDACDataStruct_t DACDataStruct_t;
typedef struct IcrrSimpleScalerStruct_t  SimpleScalerStruct_t;
typedef IcrrEventHeader_t AraEventHeader_t;
typedef IcrrEventBody_t AraEventBody_t;
typedef IcrrHkBody_t AraHkBody_t;
typedef struct IcrrPedSubbedEventBody_t PedSubbedEventBody_t;



#endif /* ARA_STRUCTURES_H */
